<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Introducing Fox-Jack: The Open Source Alternative to Hak5 Shark Jack</title>
      <link href="/2025/07/29/Introducing-Fox-Jack-The-Open-Source-Alternative-to-Hak5-Shark-Jack/"/>
      <url>/2025/07/29/Introducing-Fox-Jack-The-Open-Source-Alternative-to-Hak5-Shark-Jack/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/posts/10e2bd2d7939be81bec44b14fea5a4e4b344ddde3bf0d9f10d65b5c4a227f30c.jpg" alt="cover"></p><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>The <strong>Fox-Jack</strong> is a DIY, open-source LAN attack and automation gadget built for pentesters, red teamers, and serious tinkerers. Inspired by the Hak5 Shark Jack, this pocket-sized tool leverages the <strong>Luckfox Pico Max (RV1106G3)</strong> to deliver RNDIS network emulation, automated payload execution, and real-time LED feedback — all packed into a USB-powered form factor.</p><p>Designed for flexibility, speed, and full customizability, Fox-Jack supports dropbox-style operations, network scanning, and scripted payloads in a clean, modular system. Best of all? No proprietary lock-in. It’s cheap, hackable, and entirely yours to build.</p><h4 id="Hardware-Overview"><a href="#Hardware-Overview" class="headerlink" title="Hardware Overview"></a>Hardware Overview</h4><p>Fox-Jack is based on the <strong>Luckfox Pico Max</strong>, a compact SoC board featuring:</p><ul><li><strong>Rockchip RV1106G3</strong>: Cortex-A7 core</li><li><strong>Built-in Ethernet and USB-OTG</strong> support</li><li><strong>1.8V ADC</strong> for battery voltage monitoring</li><li><strong>256MB RAM</strong> and SPI-NAND-flash&#x2F;SD boot</li></ul><p>A custom extension board stacks beneath the Pico Max using PCB stacking techniques (like the iPhone’s interposer board). The ext board includes:</p><ul><li><strong>WS2812B RGB LED output</strong> (via SPI)</li><li><strong>Li-Ion battery input with ADC monitoring</strong></li><li><strong>Battery &amp; power management</strong></li><li><strong>2-position DIP switch</strong> to select payloads</li></ul><h4 id="PCB-Stack-Design"><a href="#PCB-Stack-Design" class="headerlink" title="PCB Stack Design"></a>PCB Stack Design</h4><p>Fox-Jack uses two boards:</p><ul><li><code>FOX-JACK_EXT_BOARD_TOP</code> (0.8mm): main logic and interface board</li><li><code>FOX-JACK_EXT_BOARD_MID</code> (1.6mm): castellated connector that sandwiches with the Pico</li></ul><p><img src="/images/posts/1eb98431aed98aefdffa51e964fe2068f1f0a3f668f5d70df1a0ae2d731efdea.jpg"><br><img src="/images/posts/1e9fbd0ff71182b392ac7aa930249e7edd84c02409b97c0f1b3040776b026d95.jpg"></p><p>This stacking saves space and keeps everything solid.</p><blockquote style="font-family: system-ui, sans-serif; font-size: 0.95em; border-left: 4px solid; border-radius: 6px;  border-color:#58a6ff; background: rgba(255,255,255,0.05); padding: 0.5em;">    <p style="color: #8cd0ff;">        <svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" style="fill: currentColor;">            <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">            </path>        </svg>        <strong style="color: currentColor;">        Note        </strong>    </p>    <div style="color: #eeeeee;">        if using <strong style="color: #eeeeee;">JLCPCB</strong>, set Castellated Holes to <strong style="color: #eeeeee;">JLCPCB</strong>No</strong>, or the cost may jump from ~$4 to $40+.        <p/><p/>        <img src="/images/posts/543c427e5d57b12e7131653fac33ef7a7574caaaf8440c9e60a0d6d750cb00e3.png">        <p/><p/>        <img src="/images/posts/37fb8b3b1fd86f5878e7c6c8ccfadeed6e06fdddddf1ccf5b3516c14fc075bea.png">        <p/><p/>        This design <strong style="color: #eeeeee;">does not use true castellated holes</strong>. Instead, it relies on <strong style="color: #eeeeee;">DIY-style side solder bridging</strong> using exposed edge pads on a regular PCB. This approach is <strong style="color: #eeeeee;">cost-efficient, strong enough</strong>, and perfectly suited for <strong style="color: #eeeeee;">DIY assembly</strong> — no need for expensive edge plating.    </div></blockquote><h4 id="Key-Features"><a href="#Key-Features" class="headerlink" title="Key Features"></a>Key Features</h4><ul><li><strong>Plug-and-Play Operation</strong> via USB (RNDIS &#x2F; CDC ECM)</li><li><strong>RGB LED Feedback</strong> using binary .bin frames or shared memory (<code>shmled</code>)</li><li><strong>Payload Scripting</strong> using standard bash shell scripts with BusyBox</li><li><strong>Battery Monitoring</strong> via SARADC</li><li><strong>Custom Startup Scripts</strong>: <code>rcS</code>, <code>rcK</code>, and <code>/etc/init.d/SXXname</code></li></ul><h4 id="Payload-System"><a href="#Payload-System" class="headerlink" title="Payload System"></a>Payload System</h4><p>Payloads are stored in <code>&lt;UMS_DISK&gt;/payloads/modN.d/</code> directories (where N &#x3D; 1, 2, 3 for modes).</p><p>Each payload file follows this format:</p><pre><code class="hljs plaintext">E????-*.payload</code></pre><p>Examples:</p><ul><li><code>E0000-arp-scan.payload</code></li><li><code>E0001-nmap-fast-scan.payload</code></li></ul><p>Payloads can be written by hand or copied to the USB Mass Storage volume (<code>&lt;UMS_DISK&gt;/payloads/mod1.d/</code>). When the system boots, it executes the selected payload based on switch or mode logic.</p><p><img src="/images/posts/ad29a51c9fb6fe625cac34499b9237aca10e68f1585e0ce220de290c0729c5e2.gif"></p><blockquote style="font-family: system-ui, sans-serif; font-size: 0.95em; border-left: 4px solid; border-radius: 6px;  border-color:#58a6ff; background: rgba(255,255,255,0.05); padding: 0.5em;">    <p style="color: #8cd0ff;">        <svg class="octicon octicon-info mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" style="fill: currentColor;">            <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z">            </path>        </svg>        <strong style="color: currentColor;">        Important Note        </strong>    </p>    <p style="color: #eeeeee;">    GNU Coreutils is not supported out-of-box due to buildroot's Y2K38 compatibility issue. Use BusyBox equivalents instead.    </p></blockquote><h4 id="Example-Use-Cases"><a href="#Example-Use-Cases" class="headerlink" title="Example Use Cases"></a>Example Use Cases</h4><ul><li><strong>Quick Nmap Recon</strong> of a target LAN</li><li><strong>ARP Scans</strong> for inventory mapping</li><li><strong>Auto-Drop Payloads</strong> on Ethernet plug-in</li><li><strong>LED Indicators</strong> for payload stage&#x2F;status</li></ul><h4 id="Build-Your-Own"><a href="#Build-Your-Own" class="headerlink" title="Build Your Own"></a>Build Your Own</h4><h5 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h5><p>All source files, example payloads, and PCB designs are hosted on <a href="https://github.com/KaliAssistant/Fox-Jack">GitHub</a>:</p><p><strong><a href="https://github.com/KaliAssistant/Fox-Jack">https://github.com/KaliAssistant/Fox-Jack</a></strong></p><p>Feel free to fork, remix, or contribute!</p><h4 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a>Disclaimer</h4><p>Fox-Jack is intended for authorized security testing, educational, and research purposes only.<br>Use of this device without explicit permission on networks or systems you do not own or have authorization to test is illegal and unethical.<br>The author and contributors are not responsible for any misuse or damage caused by this tool.<br>Please ensure you comply with all applicable laws and obtain proper consent before deployment.</p>]]></content>
      
      
      
        <tags>
            
            <tag> diy </tag>
            
            <tag> linux </tag>
            
            <tag> usb-gadget </tag>
            
            <tag> buildroot </tag>
            
            <tag> hacker-gadgets </tag>
            
            <tag> hak5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introducing RPI-SDR-TX Version 1.0.0 (Stable version, First release)</title>
      <link href="/2025/06/21/Introducing-RPI-SDR-TX-Version-1-0-0-Stable-version-First-release/"/>
      <url>/2025/06/21/Introducing-RPI-SDR-TX-Version-1-0-0-Stable-version-First-release/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/posts/3f003b52b61af48c2ba849bd72e9fe2ffe46d18fec2de739fed46382c173abb1.jpg" alt="cover"></p><h2 align="center"> Introducing RPI-SDR-TX Version 1.0.0 </h2><h4 id="About-rpi-sdr-tx"><a href="#About-rpi-sdr-tx" class="headerlink" title="About rpi-sdr-tx"></a>About rpi-sdr-tx</h4><p><strong>rpi‑sdr‑tx</strong> turns your Raspberry Pi into a fully functional SDR transmitter, handling RF from <strong>5 kHz to 1.5 GHz</strong> without specialized RF hardware (though band‑pass filtering is recommended). In v1.0.0, we’ve significantly expanded features for hands-on experimentation and hardware flexibility.</p><h4 id="Key-Features-in-v1-0-0"><a href="#Key-Features-in-v1-0-0" class="headerlink" title="Key Features in v1.0.0"></a>Key Features in v1.0.0</h4><ul><li><strong>Complete USB gadget configuration</strong>: Use <a href="https://github.com/linux-usb-gadgets/gt"><code>gt</code></a> tool to enable ACM (serial), RNDIS&#x2F;Ethernet, HID, UAC (audio), and more — no extra host-side setup is needed.</li><li><strong>WS2812B RGB LED support</strong>: Via <strong>SPI bit‑banging</strong> using <a href="https://www.airspayce.com/mikem/bcm2835/"><code>libbcm2835</code></a>, empowering you to add visual feedback&#x2F;control (e.g., status&#x2F;status-driven patterns) to your SDR setup.</li><li><strong>3D‑printable case designs</strong>: Included for neat hardware packaging—stack your Pi, antenna, LEDs, and connectors cleanly and securely.</li><li>Comprehensive <strong>hardware soldering tutorial</strong>, guiding users through safe wiring of GPIO, filter components, SMA antenna connections, and USB gadget header pins.</li><li>Full compatibility with <strong>rpitx modes</strong> (AM&#x2F;FM&#x2F;SSB&#x2F;Chirp&#x2F;SSTV&#x2F;etc.), an improved <code>easytest.sh</code> TUI, and enhanced usability for educational RF demos.</li></ul><blockquote style="font-family: system-ui, sans-serif; font-size: 0.95em; border-left: 4px solid; border-radius: 6px;  border-color:#ff9900; background: rgba(255,255,255,0.05); padding: 0.5em;">    <p style="color: #ffc666;">        <svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" style="fill: currentColor;">            <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z">            </path>        </svg>        <strong style="color: currentColor;">        Warning        </strong>    </p>    <p style="color: #eeeeee;">    This remains an <strong style="color: #eeeeee;">educational/experimental toolkit</strong>, not a certified radio transmitter. You must filter outputs to suppress harmonics and comply with local RF regulations—using unfiltered signals beyond tweaks can lead to interference or violations.    </p></blockquote><h4 id="Why-rpi‑sdr‑tx"><a href="#Why-rpi‑sdr‑tx" class="headerlink" title="Why rpi‑sdr‑tx?"></a>Why rpi‑sdr‑tx?</h4><p>By building on F5OEO’s original <strong>rpitx</strong> project, this version—with its v1.0.0 release—packs a simplified install experience, pre‑configured demos, and improved usability tailored for hobbyists and learners. It makes high‑frequency RF experimentation accessible using just a Raspberry Pi.</p><hr><h4 id="How-rpitx-works"><a href="#How-rpitx-works" class="headerlink" title="How rpitx works"></a>How rpitx works</h4><p>RPiTX uses the Raspberry Pi’s <strong>built-in PLL and clock peripheral</strong> to generate a <strong>carrier signal</strong> on a GPIO pin (typically GPIO 4 or 18). This square-wave signal (5 kHz–1500 MHz) acts as the RF carrier—harmonics are present, so filtering is essential.</p><h5 id="1-Carrier-Generation-via-PLL-Clock"><a href="#1-Carrier-Generation-via-PLL-Clock" class="headerlink" title="1. Carrier Generation via PLL &amp; Clock"></a>1. Carrier Generation via PLL &amp; Clock</h5><ul><li>The Broadcom SoC’s phase-locked loop (PLL) is configured to a high frequency.</li><li>A clock generator outputs a square wave on a GPIO pin.</li><li>The fundamental of this clock becomes the RF carrier; harmonics are ignored with proper filtering.</li></ul><h5 id="2-Frequency-and-Phase-Modulation"><a href="#2-Frequency-and-Phase-Modulation" class="headerlink" title="2. Frequency (and Phase) Modulation"></a>2. Frequency (and Phase) Modulation</h5><ul><li>RPiTX updates the PLL’s divisors in real time to shift the frequency, performing <strong>frequency modulation (FM)</strong>.</li><li>Phase modulation comes from party manipulating phase via frequency trajectory.</li></ul><h5 id="3-Amplitude-Modulation-via-GPIO-Drive-Control"><a href="#3-Amplitude-Modulation-via-GPIO-Drive-Control" class="headerlink" title="3. Amplitude Modulation via GPIO Drive Control"></a>3. Amplitude Modulation via GPIO Drive Control</h5><ul><li>Uses the peripheral’s drive-strength settings for amplitude adjustments. That provides ~8 amplitude levels (~3 bits), enabling ASK&#x2F;OOK or amplitude shaping for SSB.</li></ul><h5 id="4-Generating-Arbitrary-I-Q-Signals"><a href="#4-Generating-Arbitrary-I-Q-Signals" class="headerlink" title="4. Generating Arbitrary I&#x2F;Q Signals"></a>4. Generating Arbitrary I&#x2F;Q Signals</h5><ul><li>RPiTX can stream pre-generated I&#x2F;Q samples (e.g. from GNU Radio or csdr).</li><li>It applies those in real time using both frequency (PLL adjustments) and amplitude control, to broadcast SSB, SSTV, digital modes, and more.</li></ul><h5 id="5-Why-It-Works-on-Raspberry-Pi"><a href="#5-Why-It-Works-on-Raspberry-Pi" class="headerlink" title="5.  Why It Works on Raspberry Pi"></a>5.  Why It Works on Raspberry Pi</h5><ul><li>Pi’s SoC exposes low-level control via <em>mailbox</em> and clock&#x2F;DMA peripherals.</li><li>This lets RPiTX run tight timing loops, rapidly reconfiguring clock output.</li><li>Bit-banging any GPIO wouldn’t hit RF frequencies—hence the need for hardware clock support.</li></ul><blockquote style="font-family: system-ui, sans-serif; font-size: 0.95em; border-left: 4px solid; border-radius: 6px;  border-color:#ff9900; background: rgba(255,255,255,0.05); padding: 0.5em;">    <p style="color: #ffc666;">        <svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" style="fill: currentColor;">            <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z">            </path>        </svg>        <strong style="color: currentColor;">        Warning        </strong>    </p>    <div style="color: #eeeeee;">        The output of the Raspberry Pi GPIO 4 (or 18) is a square wave, which contains harmonics.        For example, if you transmit on 28 MHz, you will also transmit on:        <p/><p/>        <ul style="color: #eeeeee;">            <li> 28 x 3 = 84 MHz            <li> 28 x 5 = 140 MHz            <li> 28 x 7 = 196 MHz            <li> ...        </ul>        <p/><p/>        <img src="/images/posts/b0b82c9ca7199d7ef7c874454179bb4ee49354d857db81066dd4a390bff5015e.jpg">        <p style="color: #eeeeee;">            and actually you may distrub some important radio communication services. Please don't do this! You can get into trouble! You have been warned.        </p><p/>        <p style="color: #eeeeee;">            In addition to the squre wave output, the spectrum is also affected by the PWM-based amplitude modulation implemented in <i>rpitx</i>.        </p>        <ul style="color: #eeeeee;">            <li> If you want to connect this to a real antenna, you should use a <strong style="color: #eeeeee;">very good band-pass filter</strong>!            <li> Please check your signal output on a proper spectrum analyzer before ever using this on the air!            <li> In addition, only transmit if you have a proper license to do so.        </ul>    </div></blockquote><hr><h4 id="How-WS2812B-over-SPI-Coexists-with-RPiTX’s-GPCLK-GPIO4"><a href="#How-WS2812B-over-SPI-Coexists-with-RPiTX’s-GPCLK-GPIO4" class="headerlink" title="How WS2812B over SPI Coexists with RPiTX’s GPCLK (GPIO4)"></a>How WS2812B over SPI Coexists with RPiTX’s GPCLK (GPIO4)</h4><p>RPiTX uses <strong>GPCLK0 on GPIO 4</strong> to generate RF continuously. Trying to bit‑bang WS2812 LEDs via PCM&#x2F;PWM clashes and hangs the SoC. Using <strong>SPI0 MOSI (GPIO 10)</strong> avoids this conflict.</p><p><img src="/images/posts/eebaa6608529bfc2b2b57ec9a7532acced1a943b5d47426ddbd31dd8dad9b03c.jpg"><br><img src="/images/posts/d4debfff8d1e8e0027ade92c884ad5458811483f778842e6ef0a57bee0160714.jpg"></p><h5 id="3‑bit-SPI-Encoding"><a href="#3‑bit-SPI-Encoding" class="headerlink" title="3‑bit SPI Encoding"></a>3‑bit SPI Encoding</h5><ul><li><strong>Protocol timing</strong>: WS2812 expects ~1.25 µs per bit (T0H ~0.4 µs, T1H ~0.85 µs).</li><li><strong>SPI works at ~2.5–4 MHz</strong>, so <strong>3 SPI bits encode one WS2812 bit</strong>:<ul><li><code>0</code> → <code>100</code> (High‑Low‑Low)</li><li><code>1</code> → <code>110</code> (High‑High‑Low)</li></ul></li></ul><h5 id="Timing-Explanation"><a href="#Timing-Explanation" class="headerlink" title="Timing Explanation"></a>Timing Explanation</h5><ul><li>At 3 MHz, each SPI bit is ~333 ns.</li><li>Sending 3 bits &#x3D; ~1.0 µs, aligning well with the needed ~1.25 µs WS2812 slot.</li></ul><h5 id="Data-Flow"><a href="#Data-Flow" class="headerlink" title="Data Flow"></a>Data Flow</h5><ol><li>Convert each color byte (G, R, B) into 24 WS bits.</li><li>Encode each WS bit into 3 SPI bits: <code>100</code> or <code>110</code>.</li><li>Send encoded data over SPI0 (GPIO 10) in one burst.</li><li>Append a &gt;50 µs low period (reset) by sending zeros or idling.</li><li>WS2812 resets and latches the colors.</li></ol><h5 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h5><ul><li><strong>No interference</strong> with GPCLK0 on GPIO 4.</li><li>SPI + DMA ensures <strong>consistent timing</strong> with minimal CPU load.</li><li>Works well on BCM2835&#x2F;2837&#x2F;2711 SoCs.</li></ul><p><img src="/images/posts/17aeaf5c87d27ad9788cf9dc376e8431af08188dc2d07ac2ae5ba1c7cb2c885c.gif"></p><h5 id="Minimal-Pseudocode-C"><a href="#Minimal-Pseudocode-C" class="headerlink" title="Minimal Pseudocode ( C )"></a>Minimal Pseudocode ( C )</h5><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> encode3[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0b100</span>, <span class="hljs-number">0b110</span>&#125;;<span class="hljs-type">void</span> <span class="hljs-title function_">sendPixel</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> G, <span class="hljs-type">uint8_t</span> R, <span class="hljs-type">uint8_t</span> B)</span> &#123;  <span class="hljs-type">uint8_t</span> buf[<span class="hljs-number">9</span>];  <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>, bit=<span class="hljs-number">7</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-type">uint8_t</span> c : &#123;G,R,B&#125;)    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b=<span class="hljs-number">7</span>; b&gt;=<span class="hljs-number">0</span>; b--) &#123;      <span class="hljs-type">uint8_t</span> code = encode3[(c&gt;&gt;b)&amp;<span class="hljs-number">1</span>];      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;        buf[idx] |= ((code&gt;&gt;i)&amp;<span class="hljs-number">1</span>) &lt;&lt; bit;        <span class="hljs-keyword">if</span> (--bit&lt;<span class="hljs-number">0</span>)&#123; bit=<span class="hljs-number">7</span>; idx++; &#125;      &#125;    &#125;  spi_write(buf,<span class="hljs-number">9</span>);  delay_us(<span class="hljs-number">80</span>);  <span class="hljs-comment">// latch reset</span>&#125;</code></pre><hr><h4 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h4><p><strong>Build Image download -&gt;</strong> <a href="https://github.com/KaliAssistant/rpi-sdr-tx/releases/download/v1.0.0/v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz">v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz</a></p><p><strong>Install script &amp; Build script tutorial -&gt;</strong> <a href="https://kaliassistant.github.io/2025/06/20/Release-RPI-SDR-TX-Version-1-0-0">Release RPI-SDR-TX Version 1.0.0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> diy </tag>
            
            <tag> linux </tag>
            
            <tag> usb-gadget </tag>
            
            <tag> sdr </tag>
            
            <tag> radio </tag>
            
            <tag> rpi </tag>
            
            <tag> intro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Release RPI-SDR-TX Version 1.0.0</title>
      <link href="/2025/06/20/Release-RPI-SDR-TX-Version-1-0-0/"/>
      <url>/2025/06/20/Release-RPI-SDR-TX-Version-1-0-0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/posts/9e8bca475094c7c35f0343ebbc7500be19979feea57e767a622ca5e8168400c5.jpg" alt="cover"></p><h2 align="center"> RPI-SDR-TX Version 1.0.0 </h2><p>The <strong>RPI-SDR-TX Version 1.0.0</strong> is the <strong>first release</strong> version. This version includes:</p><ul><li><a href="https://github.com/KaliAssistant/rpitx"><code>rpitx</code></a> - Raspberry Pi RF transmission library &amp; core by <a href="https://github.com/F5OEO/rpitx">F5OEO</a></li><li><a href="https://github.com/KaliAssistant/libusbgx"><code>libusbgx</code></a> - Linux usb-gadget utilities library by <a href="https://github.com/linux-usb-gadgets/libusbgx">linux-usb-gadgets</a></li><li><a href="https://github.com/KaliAssistant/gt"><code>gt</code></a> - Linux usb-gadget configFS command line tools by <a href="https://github.com/linux-usb-gadgets/gt">linux-usb-gadgets</a></li><li><strong>image build script</strong> - Custom image build script based on <a href="https://www.raspberrypi.com/software/operating-systems/#raspberry-pi-os-32-bit">raspberrypi os  12 armhf lite</a></li><li><strong>3DP-cases</strong> - 3D-printable case designs</li><li><a href="https://github.com/KaliAssistant/ws2812rpi_spi"><code>ws2812rpi_spi</code></a> - Control WS2812B NeoPixel via <a href="http://www.airspayce.com/mikem/bcm2835/">BCM2835-SPI library</a></li><li><strong>Install script</strong> - Install RPI-SDR-TX into your raspberrypi os</li><li><a href=""><code>inih</code></a> - ws2812rpi_spi config INI parser by <a href="https://github.com/benhoyt/inih">Ben Hoyt</a></li></ul><hr><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><h5 id="1-Build-Image-Download-Links"><a href="#1-Build-Image-Download-Links" class="headerlink" title="1. Build Image Download Links"></a>1. Build Image Download Links</h5><ul><li><p><a href="https://github.com/KaliAssistant/rpi-sdr-tx/releases/tag/v1.0.0">https://github.com/KaliAssistant/rpi-sdr-tx/releases/tag/v1.0.0</a></p></li><li><p><a href="https://github.com/KaliAssistant/rpi-sdr-tx/releases/download/v1.0.0/v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz">v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz</a></p></li><li><p>sha256:</p><pre><code class="hljs plaintext">cd8915f197162dd197935948e6bbe3a26b3ab4a4899f4a8a91096816613ee584  v1.0.0_rpi-sdr-tx_rpi02w_armhf.img1dc4f21c4c13a90595ae12995850212fc533dcb380e27a9f86f83c59267daaa2  v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz</code></pre></li></ul><hr><h5 id="2-Using-Install-script"><a href="#2-Using-Install-script" class="headerlink" title="2. Using Install script"></a>2. Using Install script</h5><ul><li><p>run:</p><ul><li><code>git clone https://github.com/KaliAssistant/rpi-sdr-tx.git &amp;&amp; cd rpi-sdr-tx</code></li><li><code>git checkout a83acab</code></li><li><code>sudo ./install.sh</code></li></ul></li><li><p>or</p><pre><code class="hljs bash">curl -sL https://github.com/KaliAssistant/rpi-sdr-tx/releases/download/v1.0.0/v1.0.0_rpi-sdr-tx_rpi02w_armhf_install.sh | <span class="hljs-built_in">sudo</span> bash</code></pre></li></ul><hr><h5 id="3-Build-Your-Own-Image"><a href="#3-Build-Your-Own-Image" class="headerlink" title="3. Build Your Own Image"></a>3. Build Your Own Image</h5><ol><li><p>Create a Debian-based VM or Docker container</p></li><li><p>Clone the builder branch:</p> <pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/KaliAssistant/rpi-sdr-tx.git -b builder</code></pre></li><li><p>Checkout to Version 1.0.0</p> <pre><code class="hljs bash"><span class="hljs-built_in">cd</span> rpi-sdr-tx &amp;&amp; git checkout c8bc4a5</code></pre></li><li><p>Setup builder config:</p> <pre><code class="hljs bash"><span class="hljs-built_in">cp</span> builder.txt.example builder.txt</code></pre><p> Edit <code>builder.txt</code> to set mirror URLs, USB serial, etc.</p> <pre><code class="hljs bash"><span class="hljs-comment"># Your USB gadget serialnumber</span><span class="hljs-comment"># Random usb_serial if not set</span>usb_serial=<span class="hljs-string">&quot;00000000000000000000000000000000&quot;</span><span class="hljs-comment"># Free space added to the rootfs in MiB</span><span class="hljs-comment"># TODO: free_space set 100, but real free_space is ~500+100 MiB (xz will compress)</span>free_space=100<span class="hljs-comment"># USB gadget RNDIS ETHERNET settings</span>rndis_ipv4_address=<span class="hljs-string">&quot;172.16.48.1/24&quot;</span>rndis_ipv4_gateway=<span class="hljs-string">&quot;172.16.48.254&quot;</span>rndis_ipv4_dns=<span class="hljs-string">&quot;1.1.1.1&quot;</span><span class="hljs-comment"># If you have your own preferred mirrors, set them here.(when build)</span><span class="hljs-comment">#mirror=&quot;http://raspbian.raspberrypi.com/raspbian&quot;</span><span class="hljs-comment"># If you have your own preferred mirrors, set them here.(after build)</span><span class="hljs-comment">#restore_mirror=&quot;http://raspbian.raspberrypi.com/raspbian&quot;</span><span class="hljs-comment"># Dont change this (stable)</span><span class="hljs-comment">#suite=&quot;bookworm&quot;</span><span class="hljs-comment"># Use packages from the listed components of the archive.</span><span class="hljs-comment">#components=&quot;main,contrib,non-free,rpi&quot;</span></code></pre></li><li><p>Run the build script as <code>root</code>:</p> <pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./rpi02w.sh</code></pre></li><li><p>Build will take ~1 hour. ☕ Grab a coffee.</p></li><li><p>After success, check <code>./build-image/</code> for your image and checksum.</p></li></ol><hr><h4 id="Getting-started-with-RPI-SDR-TX"><a href="#Getting-started-with-RPI-SDR-TX" class="headerlink" title="Getting started with RPI-SDR-TX"></a>Getting started with RPI-SDR-TX</h4><p>Full tutorial will in next post. coming soon.</p>]]></content>
      
      
      
        <tags>
            
            <tag> diy </tag>
            
            <tag> linux </tag>
            
            <tag> usb-gadget </tag>
            
            <tag> sdr </tag>
            
            <tag> radio </tag>
            
            <tag> rpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog online</title>
      <link href="/2025/06/20/Blog-online/"/>
      <url>/2025/06/20/Blog-online/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/posts/012c2c4e758489bced7c721e5da5df991551a43da5777cfe93494a37a632e440.png" alt="cover"></p><h2 id="🌐-My-Blog-Is-Now-Online"><a href="#🌐-My-Blog-Is-Now-Online" class="headerlink" title="🌐 My Blog Is Now Online!"></a>🌐 My Blog Is Now Online!</h2><p>I’m <strong>KaliAssistant</strong>, an open‑source hardware &amp; embedded‑systems engineer — check out my full bio and passions on the About page:</p><p>👉 <a href="https://kaliassistant.github.io/about/">https://kaliassistant.github.io/about/</a></p><p>🔧 Built with Hexo + GitHub Pages, the blog features deep dives into:</p><ul><li>Hacking gadgets</li><li>Ethical hacking</li><li>IT-networking</li><li>SDR radio projects</li><li>Mesh-networking &amp; embedded hardware</li><li>Open‑hardware &amp; cybersecurity explorations</li></ul><p>Explore the content and feel free to ⭐ any projects that inspire you!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
