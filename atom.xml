<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KaliAssistant&#39;s blog</title>
  
  
  <link href="https://kaliassistant.github.io/atom.xml" rel="self"/>
  
  <link href="https://kaliassistant.github.io/"/>
  <updated>2025-06-21T10:57:55.929Z</updated>
  <id>https://kaliassistant.github.io/</id>
  
  <author>
    <name>KaliAssistant</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Introducing RPI-SDR-TX Version 1.0.0 (Stable version, First release)</title>
    <link href="https://kaliassistant.github.io/2025/06/21/Introducing-RPI-SDR-TX-Version-1-0-0-Stable-version-First-release/"/>
    <id>https://kaliassistant.github.io/2025/06/21/Introducing-RPI-SDR-TX-Version-1-0-0-Stable-version-First-release/</id>
    <published>2025-06-21T10:10:50.000Z</published>
    <updated>2025-06-21T10:57:55.929Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/posts/595fac87a1b2f9a8aa655cf0393e638699167232a38a0fa1c54efb066f5bf8e1.jpg" alt="cover"></p><h2 align="center"> Introducing RPI-SDR-TX Version 1.0.0 </h2><h4 id="About-rpi-sdr-tx"><a href="#About-rpi-sdr-tx" class="headerlink" title="About rpi-sdr-tx"></a>About rpi-sdr-tx</h4><p><strong>rpi‑sdr‑tx</strong> turns your Raspberry Pi into a fully functional SDR transmitter, handling RF from <strong>5 kHz to 1.5 GHz</strong> without specialized RF hardware (though band‑pass filtering is recommended). In v1.0.0, we’ve significantly expanded features for hands-on experimentation and hardware flexibility.</p><h4 id="Key-Features-in-v1-0-0"><a href="#Key-Features-in-v1-0-0" class="headerlink" title="Key Features in v1.0.0"></a>Key Features in v1.0.0</h4><ul><li><strong>Complete USB gadget configuration</strong>: Use <a href="https://github.com/linux-usb-gadgets/gt"><code>gt</code></a> tool to enable ACM (serial), RNDIS&#x2F;Ethernet, HID, UAC (audio), and more — no extra host-side setup is needed.</li><li><strong>WS2812B RGB LED support</strong>: Via <strong>SPI bit‑banging</strong> using <a href="https://www.airspayce.com/mikem/bcm2835/"><code>libbcm2835</code></a>, empowering you to add visual feedback&#x2F;control (e.g., status&#x2F;status-driven patterns) to your SDR setup.</li><li><strong>3D‑printable case designs</strong>: Included for neat hardware packaging—stack your Pi, antenna, LEDs, and connectors cleanly and securely.</li><li>Comprehensive <strong>hardware soldering tutorial</strong>, guiding users through safe wiring of GPIO, filter components, SMA antenna connections, and USB gadget header pins.</li><li>Full compatibility with <strong>rpitx modes</strong> (AM&#x2F;FM&#x2F;SSB&#x2F;Chirp&#x2F;SSTV&#x2F;etc.), an improved <code>easytest.sh</code> TUI, and enhanced usability for educational RF demos.</li></ul><blockquote style="font-family: system-ui, sans-serif; font-size: 0.95em; border-left: 4px solid; border-radius: 6px;  border-color:#ff9900; background: rgba(255,255,255,0.05); padding: 0.5em;">    <p style="color: #ffc666;">        <svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" style="fill: currentColor;">            <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z">            </path>        </svg>        <strong style="color: currentColor;">        Warning        </strong>    </p>    <p style="color: #eeeeee;">    This remains an <strong style="color: #eeeeee;">educational/experimental toolkit</strong>, not a certified radio transmitter. You must filter outputs to suppress harmonics and comply with local RF regulations—using unfiltered signals beyond tweaks can lead to interference or violations.    </p></blockquote><h4 id="Why-rpi‑sdr‑tx"><a href="#Why-rpi‑sdr‑tx" class="headerlink" title="Why rpi‑sdr‑tx?"></a>Why rpi‑sdr‑tx?</h4><p>By building on F5OEO’s original <strong>rpitx</strong> project, this version—with its v1.0.0 release—packs a simplified install experience, pre‑configured demos, and improved usability tailored for hobbyists and learners. It makes high‑frequency RF experimentation accessible using just a Raspberry Pi.</p><hr><h4 id="How-rpitx-works"><a href="#How-rpitx-works" class="headerlink" title="How rpitx works"></a>How rpitx works</h4><p>RPiTX uses the Raspberry Pi’s <strong>built-in PLL and clock peripheral</strong> to generate a <strong>carrier signal</strong> on a GPIO pin (typically GPIO 4 or 18). This square-wave signal (5 kHz–1500 MHz) acts as the RF carrier—harmonics are present, so filtering is essential.</p><h5 id="1-Carrier-Generation-via-PLL-Clock"><a href="#1-Carrier-Generation-via-PLL-Clock" class="headerlink" title="1. Carrier Generation via PLL &amp; Clock"></a>1. Carrier Generation via PLL &amp; Clock</h5><ul><li>The Broadcom SoC’s phase-locked loop (PLL) is configured to a high frequency.</li><li>A clock generator outputs a square wave on a GPIO pin.</li><li>The fundamental of this clock becomes the RF carrier; harmonics are ignored with proper filtering.</li></ul><h5 id="2-Frequency-and-Phase-Modulation"><a href="#2-Frequency-and-Phase-Modulation" class="headerlink" title="2. Frequency (and Phase) Modulation"></a>2. Frequency (and Phase) Modulation</h5><ul><li>RPiTX updates the PLL’s divisors in real time to shift the frequency, performing <strong>frequency modulation (FM)</strong>.</li><li>Phase modulation comes from party manipulating phase via frequency trajectory.</li></ul><h5 id="3-Amplitude-Modulation-via-GPIO-Drive-Control"><a href="#3-Amplitude-Modulation-via-GPIO-Drive-Control" class="headerlink" title="3. Amplitude Modulation via GPIO Drive Control"></a>3. Amplitude Modulation via GPIO Drive Control</h5><ul><li>Uses the peripheral’s drive-strength settings for amplitude adjustments. That provides ~8 amplitude levels (~3 bits), enabling ASK&#x2F;OOK or amplitude shaping for SSB.</li></ul><h5 id="4-Generating-Arbitrary-I-Q-Signals"><a href="#4-Generating-Arbitrary-I-Q-Signals" class="headerlink" title="4. Generating Arbitrary I&#x2F;Q Signals"></a>4. Generating Arbitrary I&#x2F;Q Signals</h5><ul><li>RPiTX can stream pre-generated I&#x2F;Q samples (e.g. from GNU Radio or csdr).</li><li>It applies those in real time using both frequency (PLL adjustments) and amplitude control, to broadcast SSB, SSTV, digital modes, and more.</li></ul><h5 id="5-Why-It-Works-on-Raspberry-Pi"><a href="#5-Why-It-Works-on-Raspberry-Pi" class="headerlink" title="5.  Why It Works on Raspberry Pi"></a>5.  Why It Works on Raspberry Pi</h5><ul><li>Pi’s SoC exposes low-level control via <em>mailbox</em> and clock&#x2F;DMA peripherals.</li><li>This lets RPiTX run tight timing loops, rapidly reconfiguring clock output.</li><li>Bit-banging any GPIO wouldn’t hit RF frequencies—hence the need for hardware clock support.</li></ul><blockquote style="font-family: system-ui, sans-serif; font-size: 0.95em; border-left: 4px solid; border-radius: 6px;  border-color:#ff9900; background: rgba(255,255,255,0.05); padding: 0.5em;">    <p style="color: #ffc666;">        <svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true" style="fill: currentColor;">            <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z">            </path>        </svg>        <strong style="color: currentColor;">        Warning        </strong>    </p>    <div style="color: #eeeeee;">        The output of the Raspberry Pi GPIO 4 (or 18) is a square wave, which contains harmonics.        For example, if you transmit on 28 MHz, you will also transmit on:        <p/><p/>        <p style="color: #eeeeee;">            <li> 28 x 3 = 84 MHz            <li> 28 x 5 = 140 MHz            <li> 28 x 7 = 196 MHz            <li> ...        </p>        <p/><p/>        <img src="/images/posts/9ae2a21b0aac63093bdc4311b7c69f379bbd5030e22d8c7b91285e82183571ca.jpg">        <p style="color: #eeeeee;">            and actually you may distrub some important radio communication services. Please don't do this! You can get into trouble! You have been warned.        </p><p/>        <p style="color: #eeeeee;">            In addition to the squre wave output, the spectrum is also affected by the PWM-based amplitude modulation implemented in <i>rpitx</i>.        </p>        <p style="color: #eeeeee;">            <li> If you want to connect this to a real antenna, you should use a <strong style="color: #eeeeee;">very good band-pass filter</strong>!            <li> Please check your signal output on a proper spectrum analyzer before ever using this on the air!            <li> In addition, only transmit if you have a proper license to do so.        </p>    </div></blockquote><hr><h4 id="How-WS2812B-over-SPI-Coexists-with-RPiTX’s-GPCLK-GPIO4"><a href="#How-WS2812B-over-SPI-Coexists-with-RPiTX’s-GPCLK-GPIO4" class="headerlink" title="How WS2812B over SPI Coexists with RPiTX’s GPCLK (GPIO4)"></a>How WS2812B over SPI Coexists with RPiTX’s GPCLK (GPIO4)</h4><p>RPiTX uses <strong>GPCLK0 on GPIO 4</strong> to generate RF continuously. Trying to bit‑bang WS2812 LEDs via PCM&#x2F;PWM clashes and hangs the SoC. Using <strong>SPI0 MOSI (GPIO 10)</strong> avoids this conflict.</p><img src="/images/posts/dd34e7b2f8b8358c0a18bd97df4416266d2650dece804855fe5c19f50c4614ec.jpg"><img src="/images/posts/0ee3190db32a1ce935ce2c3fd3f748ac765bd34f8ff8bb5d96c0f8ec03865162.jpg"><h5 id="3‑bit-SPI-Encoding"><a href="#3‑bit-SPI-Encoding" class="headerlink" title="3‑bit SPI Encoding"></a>3‑bit SPI Encoding</h5><ul><li><strong>Protocol timing</strong>: WS2812 expects ~1.25 µs per bit (T0H ~0.4 µs, T1H ~0.85 µs).</li><li><strong>SPI works at ~2.5–4 MHz</strong>, so <strong>3 SPI bits encode one WS2812 bit</strong>:<ul><li><code>0</code> → <code>100</code> (High‑Low‑Low)</li><li><code>1</code> → <code>110</code> (High‑High‑Low)</li></ul></li></ul><h5 id="Timing-Explanation"><a href="#Timing-Explanation" class="headerlink" title="Timing Explanation"></a>Timing Explanation</h5><ul><li>At 3 MHz, each SPI bit is ~333 ns.</li><li>Sending 3 bits &#x3D; ~1.0 µs, aligning well with the needed ~1.25 µs WS2812 slot.</li></ul><h5 id="Data-Flow"><a href="#Data-Flow" class="headerlink" title="Data Flow"></a>Data Flow</h5><ol><li>Convert each color byte (G, R, B) into 24 WS bits.</li><li>Encode each WS bit into 3 SPI bits: <code>100</code> or <code>110</code>.</li><li>Send encoded data over SPI0 (GPIO 10) in one burst.</li><li>Append a &gt;50 µs low period (reset) by sending zeros or idling.</li><li>WS2812 resets and latches the colors.</li></ol><h5 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h5><ul><li><strong>No interference</strong> with GPCLK0 on GPIO 4.</li><li>SPI + DMA ensures <strong>consistent timing</strong> with minimal CPU load.</li><li>Works well on BCM2835&#x2F;2837&#x2F;2711 SoCs.</li></ul><img src="/images/posts/17aeaf5c87d27ad9788cf9dc376e8431af08188dc2d07ac2ae5ba1c7cb2c885c.gif"><h5 id="Minimal-Pseudocode-C"><a href="#Minimal-Pseudocode-C" class="headerlink" title="Minimal Pseudocode ( C )"></a>Minimal Pseudocode ( C )</h5><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> encode3[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0b100</span>, <span class="hljs-number">0b110</span>&#125;;<span class="hljs-type">void</span> <span class="hljs-title function_">sendPixel</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> G, <span class="hljs-type">uint8_t</span> R, <span class="hljs-type">uint8_t</span> B)</span> &#123;  <span class="hljs-type">uint8_t</span> buf[<span class="hljs-number">9</span>];  <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>, bit=<span class="hljs-number">7</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-type">uint8_t</span> c : &#123;G,R,B&#125;)    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b=<span class="hljs-number">7</span>; b&gt;=<span class="hljs-number">0</span>; b--) &#123;      <span class="hljs-type">uint8_t</span> code = encode3[(c&gt;&gt;b)&amp;<span class="hljs-number">1</span>];      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;        buf[idx] |= ((code&gt;&gt;i)&amp;<span class="hljs-number">1</span>) &lt;&lt; bit;        <span class="hljs-keyword">if</span> (--bit&lt;<span class="hljs-number">0</span>)&#123; bit=<span class="hljs-number">7</span>; idx++; &#125;      &#125;    &#125;  spi_write(buf,<span class="hljs-number">9</span>);  delay_us(<span class="hljs-number">80</span>);  <span class="hljs-comment">// latch reset</span>&#125;</code></pre><hr><h4 id="Downloads"><a href="#Downloads" class="headerlink" title="Downloads"></a>Downloads</h4><p><strong>Build Image download -&gt;</strong> <a href="https://github.com/KaliAssistant/rpi-sdr-tx/releases/download/v1.0.0/v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz">v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz</a></p><p><strong>Install script &amp; Build script tutorial -&gt;</strong> <a href="https://kaliassistant.github.io/2025/06/20/Release-RPI-SDR-TX-Version-1-0-0">Release RPI-SDR-TX Version 1.0.0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/595fac87a1b2f9a8aa655cf0393e638699167232a38a0fa1c54efb066f5bf8e1.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt; Introd</summary>
      
    
    
    
    
    <category term="sdr" scheme="https://kaliassistant.github.io/tags/sdr/"/>
    
    <category term="radio" scheme="https://kaliassistant.github.io/tags/radio/"/>
    
    <category term="rpi" scheme="https://kaliassistant.github.io/tags/rpi/"/>
    
    <category term="diy" scheme="https://kaliassistant.github.io/tags/diy/"/>
    
    <category term="linux" scheme="https://kaliassistant.github.io/tags/linux/"/>
    
    <category term="usb-gadget" scheme="https://kaliassistant.github.io/tags/usb-gadget/"/>
    
    <category term="intro" scheme="https://kaliassistant.github.io/tags/intro/"/>
    
  </entry>
  
  <entry>
    <title>Release RPI-SDR-TX Version 1.0.0</title>
    <link href="https://kaliassistant.github.io/2025/06/20/Release-RPI-SDR-TX-Version-1-0-0/"/>
    <id>https://kaliassistant.github.io/2025/06/20/Release-RPI-SDR-TX-Version-1-0-0/</id>
    <published>2025-06-20T02:31:26.000Z</published>
    <updated>2025-06-21T05:23:18.914Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/posts/8f4a36c44767d8f088e85d198181c97f7753ba2755ae5c202ff6e6fff8135619.jpg" alt="cover"></p><h2 align="center"> RPI-SDR-TX Version 1.0.0 </h2><p>The <strong>RPI-SDR-TX Version 1.0.0</strong> is the <strong>first release</strong> version. This version includes:</p><ul><li><a href="https://github.com/KaliAssistant/rpitx"><code>rpitx</code></a> - Raspberry Pi RF transmission library &amp; core by <a href="https://github.com/F5OEO/rpitx">F5OEO</a></li><li><a href="https://github.com/KaliAssistant/libusbgx"><code>libusbgx</code></a> - Linux usb-gadget utilities library by <a href="https://github.com/linux-usb-gadgets/libusbgx">linux-usb-gadgets</a></li><li><a href="https://github.com/KaliAssistant/gt"><code>gt</code></a> - Linux usb-gadget configFS command line tools by <a href="https://github.com/linux-usb-gadgets/gt">linux-usb-gadgets</a></li><li><strong>image build script</strong> - Custom image build script based on <a href="https://www.raspberrypi.com/software/operating-systems/#raspberry-pi-os-32-bit">raspberrypi os  12 armhf lite</a></li><li><strong>3DP-cases</strong> - 3D-printable case designs</li><li><a href="https://github.com/KaliAssistant/ws2812rpi_spi"><code>ws2812rpi_spi</code></a> - Control WS2812B NeoPixel via <a href="http://www.airspayce.com/mikem/bcm2835/">BCM2835-SPI library</a></li><li><strong>Install script</strong> - Install RPI-SDR-TX into your raspberrypi os</li><li><a href=""><code>inih</code></a> - ws2812rpi_spi config INI parser by <a href="https://github.com/benhoyt/inih">Ben Hoyt</a></li></ul><hr><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><h5 id="1-Build-Image-Download-Links"><a href="#1-Build-Image-Download-Links" class="headerlink" title="1. Build Image Download Links"></a>1. Build Image Download Links</h5><ul><li><p><a href="https://github.com/KaliAssistant/rpi-sdr-tx/releases/tag/v1.0.0">https://github.com/KaliAssistant/rpi-sdr-tx/releases/tag/v1.0.0</a></p></li><li><p><a href="https://github.com/KaliAssistant/rpi-sdr-tx/releases/download/v1.0.0/v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz">v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz</a></p></li><li><p>sha256:</p><pre><code class="hljs plaintext">cd8915f197162dd197935948e6bbe3a26b3ab4a4899f4a8a91096816613ee584  v1.0.0_rpi-sdr-tx_rpi02w_armhf.img1dc4f21c4c13a90595ae12995850212fc533dcb380e27a9f86f83c59267daaa2  v1.0.0_rpi-sdr-tx_rpi02w_armhf.img.xz</code></pre></li></ul><hr><h5 id="2-Using-Install-script"><a href="#2-Using-Install-script" class="headerlink" title="2. Using Install script"></a>2. Using Install script</h5><ul><li><p>run:</p><ul><li><code>git clone https://github.com/KaliAssistant/rpi-sdr-tx.git &amp;&amp; cd rpi-sdr-tx</code></li><li><code>git checkout a83acab</code></li><li><code>sudo ./install.sh</code></li></ul></li><li><p>or</p><pre><code class="hljs bash">curl -sL https://github.com/KaliAssistant/rpi-sdr-tx/releases/download/v1.0.0/v1.0.0_rpi-sdr-tx_rpi02w_armhf_install.sh | <span class="hljs-built_in">sudo</span> bash</code></pre></li></ul><hr><h5 id="3-Build-Your-Own-Image"><a href="#3-Build-Your-Own-Image" class="headerlink" title="3. Build Your Own Image"></a>3. Build Your Own Image</h5><ol><li><p>Create a Debian-based VM or Docker container</p></li><li><p>Clone the builder branch:</p> <pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/KaliAssistant/rpi-sdr-tx.git -b builder</code></pre></li><li><p>Checkout to Version 1.0.0</p> <pre><code class="hljs bash"><span class="hljs-built_in">cd</span> rpi-sdr-tx &amp;&amp; git checkout c8bc4a5</code></pre></li><li><p>Setup builder config:</p> <pre><code class="hljs bash"><span class="hljs-built_in">cp</span> builder.txt.example builder.txt</code></pre><p> Edit <code>builder.txt</code> to set mirror URLs, USB serial, etc.</p> <pre><code class="hljs bash"><span class="hljs-comment"># Your USB gadget serialnumber</span><span class="hljs-comment"># Random usb_serial if not set</span>usb_serial=<span class="hljs-string">&quot;00000000000000000000000000000000&quot;</span><span class="hljs-comment"># Free space added to the rootfs in MiB</span><span class="hljs-comment"># TODO: free_space set 100, but real free_space is ~500+100 MiB (xz will compress)</span>free_space=100<span class="hljs-comment"># USB gadget RNDIS ETHERNET settings</span>rndis_ipv4_address=<span class="hljs-string">&quot;172.16.48.1/24&quot;</span>rndis_ipv4_gateway=<span class="hljs-string">&quot;172.16.48.254&quot;</span>rndis_ipv4_dns=<span class="hljs-string">&quot;1.1.1.1&quot;</span><span class="hljs-comment"># If you have your own preferred mirrors, set them here.(when build)</span><span class="hljs-comment">#mirror=&quot;http://raspbian.raspberrypi.com/raspbian&quot;</span><span class="hljs-comment"># If you have your own preferred mirrors, set them here.(after build)</span><span class="hljs-comment">#restore_mirror=&quot;http://raspbian.raspberrypi.com/raspbian&quot;</span><span class="hljs-comment"># Dont change this (stable)</span><span class="hljs-comment">#suite=&quot;bookworm&quot;</span><span class="hljs-comment"># Use packages from the listed components of the archive.</span><span class="hljs-comment">#components=&quot;main,contrib,non-free,rpi&quot;</span></code></pre></li><li><p>Run the build script as <code>root</code>:</p> <pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./rpi02w.sh</code></pre></li><li><p>Build will take ~1 hour. ☕ Grab a coffee.</p></li><li><p>After success, check <code>./build-image/</code> for your image and checksum.</p></li></ol><hr><h4 id="Getting-started-with-RPI-SDR-TX"><a href="#Getting-started-with-RPI-SDR-TX" class="headerlink" title="Getting started with RPI-SDR-TX"></a>Getting started with RPI-SDR-TX</h4><p>Full tutorial will in next post. coming soon.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/8f4a36c44767d8f088e85d198181c97f7753ba2755ae5c202ff6e6fff8135619.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt; RPI-SD</summary>
      
    
    
    
    
    <category term="sdr" scheme="https://kaliassistant.github.io/tags/sdr/"/>
    
    <category term="radio" scheme="https://kaliassistant.github.io/tags/radio/"/>
    
    <category term="rpi" scheme="https://kaliassistant.github.io/tags/rpi/"/>
    
    <category term="diy" scheme="https://kaliassistant.github.io/tags/diy/"/>
    
    <category term="linux" scheme="https://kaliassistant.github.io/tags/linux/"/>
    
    <category term="usb-gadget" scheme="https://kaliassistant.github.io/tags/usb-gadget/"/>
    
  </entry>
  
  <entry>
    <title>Blog online</title>
    <link href="https://kaliassistant.github.io/2025/06/20/Blog-online/"/>
    <id>https://kaliassistant.github.io/2025/06/20/Blog-online/</id>
    <published>2025-06-20T01:40:10.000Z</published>
    <updated>2025-06-21T02:58:06.251Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/posts/82d5fe03c77adf299783b6d2ff53a9cc744c2026289b569eb032161aea838f42.png" alt="cover"></p><h2 id="🌐-My-Blog-Is-Now-Online"><a href="#🌐-My-Blog-Is-Now-Online" class="headerlink" title="🌐 My Blog Is Now Online!"></a>🌐 My Blog Is Now Online!</h2><p>I’m <strong>KaliAssistant</strong>, an open‑source hardware &amp; embedded‑systems engineer — check out my full bio and passions on the About page:</p><p>👉 <a href="https://kaliassistant.github.io/about/">https://kaliassistant.github.io/about/</a></p><p>🔧 Built with Hexo + GitHub Pages, the blog features deep dives into:</p><ul><li>Hacking gadgets</li><li>Ethical hacking</li><li>IT-networking</li><li>SDR radio projects</li><li>Mesh-networking &amp; embedded hardware</li><li>Open‑hardware &amp; cybersecurity explorations</li></ul><p>Explore the content and feel free to ⭐ any projects that inspire you!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/posts/82d5fe03c77adf299783b6d2ff53a9cc744c2026289b569eb032161aea838f42.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;🌐-My-Blog-Is-Now-</summary>
      
    
    
    
    
  </entry>
  
</feed>
